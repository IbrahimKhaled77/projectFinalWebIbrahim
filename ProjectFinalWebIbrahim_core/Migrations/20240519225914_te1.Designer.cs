// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjectFinalWebIbrahim_core.Context;

#nullable disable

namespace ProjectFinalWebIbrahim_core.Migrations
{
    [DbContext(typeof(ProjectWebFinalDbContext))]
    [Migration("20240519225914_te1")]
    partial class te1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ProjectFinalWebIbrahim_core.Model.Entity.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categorie");
                });

            modelBuilder.Entity("ProjectFinalWebIbrahim_core.Model.Entity.Login", b =>
                {
                    b.Property<int>("LoginId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("IsLoggedIn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("LastLoginTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("LoginId");

                    b.HasIndex("UsersId");

                    b.ToTable("Login", t =>
                        {
                            t.HasCheckConstraint("CK_Password_Complexity", "LENGTH(`Password`) >=  11 AND `Password` REGEXP '%[0-9]%' AND `Password` REGEXP '%[A-Za-z]%' AND `Password` REGEXP '%[^A-Za-z]%'");
                        });
                });

            modelBuilder.Entity("ProjectFinalWebIbrahim_core.Model.Entity.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOrder")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Rate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("UsersId");

                    b.ToTable("Order", t =>
                        {
                            t.HasCheckConstraint("CK_PaymentMethod_ValidValues", "`PaymentMethod` IN ('CreditCard', 'PayPal', 'BankTransfer')");

                            t.HasCheckConstraint("CK_Rate_ValidRange", "`Rate` >= 0 AND `Rate` <= 5");

                            t.HasCheckConstraint("CK_Status_ValidValues", "`Status` IN ('Pending', 'Shipped', 'Delivered', 'Cancelled')");
                        });
                });

            modelBuilder.Entity("ProjectFinalWebIbrahim_core.Model.Entity.OrderService", b =>
                {
                    b.Property<int>("OrderServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("OrderServiceId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ServiceId");

                    b.ToTable("OrderService");
                });

            modelBuilder.Entity("ProjectFinalWebIbrahim_core.Model.Entity.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("DiscountType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("IsHaveDiscount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("ServiceId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Services", t =>
                        {
                            t.HasCheckConstraint("CK_DiscountAmount_NonNegative", "`DiscountAmount` >= 0");

                            t.HasCheckConstraint("CK_Price_NonNegative", "`Price` >= 0");

                            t.HasCheckConstraint("CK_Quantity_NonNegative", "`Quantity` >= 0");
                        });
                });

            modelBuilder.Entity("ProjectFinalWebIbrahim_core.Model.Entity.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("UserId");

                    b.ToTable("User", t =>
                        {
                            t.HasCheckConstraint("CHK_FirstName", "NOT (FirstName REGEXP '[0-9]') AND NOT (FirstName REGEXP '[^A-Za-z\\s]')");

                            t.HasCheckConstraint("CHK_LastName", "NOT (LastName REGEXP '[0-9]') AND NOT (LastName REGEXP '[^A-Za-z\\s]')");

                            t.HasCheckConstraint("CK_BirthDate", "`BirthDate` <= '2006-01-01'");

                            t.HasCheckConstraint("Email", "(`Email` like '%@GMAIL%' OR `Email` like '%@HOTMAIL%' OR `Email` like '%@ICLOUD%')");
                        });
                });

            modelBuilder.Entity("ProjectFinalWebIbrahim_core.Model.Entity.UserType", b =>
                {
                    b.Property<int>("UserTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("UserTypeId");

                    b.HasIndex("UsersId");

                    b.ToTable("UserType", t =>
                        {
                            t.HasCheckConstraint("CHK_Name", "NOT (Name REGEXP '[0-9]') AND NOT (Name REGEXP '[^A-Za-z\\s]')");
                        });
                });

            modelBuilder.Entity("ProjectFinalWebIbrahim_core.Model.Entity.Login", b =>
                {
                    b.HasOne("ProjectFinalWebIbrahim_core.Model.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId");
                });

            modelBuilder.Entity("ProjectFinalWebIbrahim_core.Model.Entity.Order", b =>
                {
                    b.HasOne("ProjectFinalWebIbrahim_core.Model.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId");
                });

            modelBuilder.Entity("ProjectFinalWebIbrahim_core.Model.Entity.OrderService", b =>
                {
                    b.HasOne("ProjectFinalWebIbrahim_core.Model.Entity.Order", null)
                        .WithMany()
                        .HasForeignKey("OrderId");

                    b.HasOne("ProjectFinalWebIbrahim_core.Model.Entity.Service", null)
                        .WithMany()
                        .HasForeignKey("ServiceId");
                });

            modelBuilder.Entity("ProjectFinalWebIbrahim_core.Model.Entity.Service", b =>
                {
                    b.HasOne("ProjectFinalWebIbrahim_core.Model.Entity.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoryId");
                });

            modelBuilder.Entity("ProjectFinalWebIbrahim_core.Model.Entity.UserType", b =>
                {
                    b.HasOne("ProjectFinalWebIbrahim_core.Model.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId");
                });
#pragma warning restore 612, 618
        }
    }
}
